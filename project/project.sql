-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."DoctorApp_doctordetails"
(
    id bigint NOT NULL DEFAULT 'nextval('"DoctorApp_doctordetails_id_seq"'::regclass)',
    specialization_area character varying(300) COLLATE pg_catalog."default" NOT NULL,
    specialization character varying(300) COLLATE pg_catalog."default",
    location_details character varying(300) COLLATE pg_catalog."default" NOT NULL,
    phone_number character varying(16) COLLATE pg_catalog."default" NOT NULL,
    is_varified_phone boolean NOT NULL,
    available_from_time time without time zone NOT NULL,
    available_till_time time without time zone NOT NULL,
    is_available boolean NOT NULL,
    profile_id bigint NOT NULL,
    CONSTRAINT "DoctorApp_doctordetails_pkey" PRIMARY KEY (id),
    CONSTRAINT "DoctorApp_doctordetails_phone_number_key" UNIQUE (phone_number)
);

CREATE TABLE IF NOT EXISTS public."DoctorApp_doctoreductaionaldetails"
(
    id bigint NOT NULL DEFAULT 'nextval('"DoctorApp_doctoreductaionaldetails_id_seq"'::regclass)',
    ug_course character varying(50) COLLATE pg_catalog."default",
    ug_institute character varying(100) COLLATE pg_catalog."default",
    pg_course character varying(50) COLLATE pg_catalog."default",
    pg_institute character varying(100) COLLATE pg_catalog."default",
    years_of_experience integer NOT NULL,
    doctor_id integer NOT NULL,
    CONSTRAINT "DoctorApp_doctoreductaionaldetails_pkey" PRIMARY KEY (id),
    CONSTRAINT "DoctorApp_doctoreductaionaldetails_doctor_id_a004d0bd_uniq" UNIQUE (doctor_id)
);

CREATE TABLE IF NOT EXISTS public."DoctorApp_doctorlocation"
(
    id bigint NOT NULL DEFAULT 'nextval('"DoctorApp_doctorlocation_id_seq"'::regclass)',
    available_from_time time without time zone NOT NULL,
    available_till_time time without time zone NOT NULL,
    doctor_id integer NOT NULL,
    city character varying(30) COLLATE pg_catalog."default",
    pincode numeric(6, 0),
    state character varying(30) COLLATE pg_catalog."default",
    street character varying(200) COLLATE pg_catalog."default",
    CONSTRAINT "DoctorApp_doctorlocation_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."PatientApp_medicalrecords"
(
    id bigint NOT NULL DEFAULT 'nextval('"PatientApp_medicalrecords_id_seq"'::regclass)',
    file_description character varying(500) COLLATE pg_catalog."default",
    file character varying(100) COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT "PatientApp_medicalrecords_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."PatientApp_userprofilepicture"
(
    id bigint NOT NULL DEFAULT 'nextval('"PatientApp_userprofilepicture_id_seq"'::regclass)',
    profile_picture character varying(100) COLLATE pg_catalog."default",
    user_id integer NOT NULL,
    CONSTRAINT "PatientApp_userprofilepicture_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."appointmentHandler_appointment"
(
    id bigint NOT NULL DEFAULT 'nextval('"appointmentHandler_appointment_id_seq"'::regclass)',
    reason character varying(500) COLLATE pg_catalog."default" NOT NULL,
    comments text COLLATE pg_catalog."default",
    created_on timestamp with time zone NOT NULL,
    is_confirm boolean,
    is_canceled boolean,
    is_completed boolean,
    doctor_id integer NOT NULL,
    patient_id integer NOT NULL,
    visiting_location_id bigint NOT NULL,
    date date,
    CONSTRAINT "appointmentHandler_appointment_pkey" PRIMARY KEY (id),
    CONSTRAINT "appointmentHandler_appoi_patient_id_doctor_id_dat_8a77dd28_uniq" UNIQUE (patient_id, doctor_id, date)
);

CREATE TABLE IF NOT EXISTS public.auth_group
(
    id integer NOT NULL DEFAULT 'nextval('auth_group_id_seq'::regclass)',
    name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_group_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.auth_group_permissions
(
    id bigint NOT NULL DEFAULT 'nextval('auth_group_permissions_id_seq'::regclass)',
    group_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.auth_permission
(
    id integer NOT NULL DEFAULT 'nextval('auth_permission_id_seq'::regclass)',
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_permission_pkey PRIMARY KEY (id),
    CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename)
);

CREATE TABLE IF NOT EXISTS public.auth_user
(
    id integer NOT NULL DEFAULT 'nextval('auth_user_id_seq'::regclass)',
    password character varying(128) COLLATE pg_catalog."default" NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    email character varying(254) COLLATE pg_catalog."default" NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    CONSTRAINT auth_user_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.auth_user_groups
(
    id bigint NOT NULL DEFAULT 'nextval('auth_user_groups_id_seq'::regclass)',
    user_id integer NOT NULL,
    group_id integer NOT NULL,
    CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id)
);

CREATE TABLE IF NOT EXISTS public.auth_user_user_permissions
(
    id bigint NOT NULL DEFAULT 'nextval('auth_user_user_permissions_id_seq'::regclass)',
    user_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.django_admin_log
(
    id integer NOT NULL DEFAULT 'nextval('django_admin_log_id_seq'::regclass)',
    action_time timestamp with time zone NOT NULL,
    object_id text COLLATE pg_catalog."default",
    object_repr character varying(200) COLLATE pg_catalog."default" NOT NULL,
    action_flag smallint NOT NULL,
    change_message text COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.django_content_type
(
    id integer NOT NULL DEFAULT 'nextval('django_content_type_id_seq'::regclass)',
    app_label character varying(100) COLLATE pg_catalog."default" NOT NULL,
    model character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT django_content_type_pkey PRIMARY KEY (id),
    CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model)
);

CREATE TABLE IF NOT EXISTS public.django_migrations
(
    id bigint NOT NULL DEFAULT 'nextval('django_migrations_id_seq'::regclass)',
    app character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    applied timestamp with time zone NOT NULL,
    CONSTRAINT django_migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.django_session
(
    session_key character varying(40) COLLATE pg_catalog."default" NOT NULL,
    session_data text COLLATE pg_catalog."default" NOT NULL,
    expire_date timestamp with time zone NOT NULL,
    CONSTRAINT django_session_pkey PRIMARY KEY (session_key)
);

ALTER TABLE IF EXISTS public."DoctorApp_doctordetails"
    ADD CONSTRAINT "DoctorApp_doctordeta_profile_id_cac8a0aa_fk_PatientAp" FOREIGN KEY (profile_id)
    REFERENCES public."PatientApp_userprofilepicture" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "DoctorApp_doctordetails_profile_id_cac8a0aa"
    ON public."DoctorApp_doctordetails"(profile_id);


ALTER TABLE IF EXISTS public."DoctorApp_doctoreductaionaldetails"
    ADD CONSTRAINT "DoctorApp_doctoreduc_doctor_id_a004d0bd_fk_auth_user" FOREIGN KEY (doctor_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "DoctorApp_doctoreductaionaldetails_doctor_id_a004d0bd_uniq"
    ON public."DoctorApp_doctoreductaionaldetails"(doctor_id);


ALTER TABLE IF EXISTS public."DoctorApp_doctorlocation"
    ADD CONSTRAINT "DoctorApp_doctorlocation_doctor_id_0170cf6c_fk_auth_user_id" FOREIGN KEY (doctor_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "DoctorApp_doctorlocation_doctor_id_0170cf6c"
    ON public."DoctorApp_doctorlocation"(doctor_id);


ALTER TABLE IF EXISTS public."PatientApp_medicalrecords"
    ADD CONSTRAINT "PatientApp_medicalrecords_user_id_f5b83998_fk_auth_user_id" FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "PatientApp_medicalrecords_user_id_f5b83998"
    ON public."PatientApp_medicalrecords"(user_id);


ALTER TABLE IF EXISTS public."PatientApp_userprofilepicture"
    ADD CONSTRAINT "PatientApp_userprofilepicture_user_id_a92510ae_fk_auth_user_id" FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "PatientApp_userprofilepicture_user_id_a92510ae"
    ON public."PatientApp_userprofilepicture"(user_id);


ALTER TABLE IF EXISTS public."appointmentHandler_appointment"
    ADD CONSTRAINT "appointmentHandler_a_doctor_id_391ff70f_fk_auth_user" FOREIGN KEY (doctor_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "appointmentHandler_appointment_doctor_id_391ff70f"
    ON public."appointmentHandler_appointment"(doctor_id);


ALTER TABLE IF EXISTS public."appointmentHandler_appointment"
    ADD CONSTRAINT "appointmentHandler_a_patient_id_affd5b7b_fk_auth_user" FOREIGN KEY (patient_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "appointmentHandler_appointment_patient_id_affd5b7b"
    ON public."appointmentHandler_appointment"(patient_id);


ALTER TABLE IF EXISTS public."appointmentHandler_appointment"
    ADD CONSTRAINT "appointmentHandler_a_visiting_location_id_0c447124_fk_DoctorApp" FOREIGN KEY (visiting_location_id)
    REFERENCES public."DoctorApp_doctorlocation" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS "appointmentHandler_appointment_visiting_location_id_0c447124"
    ON public."appointmentHandler_appointment"(visiting_location_id);


ALTER TABLE IF EXISTS public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id)
    REFERENCES public.auth_permission (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_group_permissions_permission_id_84c5c92e
    ON public.auth_group_permissions(permission_id);


ALTER TABLE IF EXISTS public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id)
    REFERENCES public.auth_group (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_group_permissions_group_id_b120cbf9
    ON public.auth_group_permissions(group_id);


ALTER TABLE IF EXISTS public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id)
    REFERENCES public.django_content_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_permission_content_type_id_2f476e4b
    ON public.auth_permission(content_type_id);


ALTER TABLE IF EXISTS public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id)
    REFERENCES public.auth_group (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_groups_group_id_97559544
    ON public.auth_user_groups(group_id);


ALTER TABLE IF EXISTS public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_groups_user_id_6a12ed8b
    ON public.auth_user_groups(user_id);


ALTER TABLE IF EXISTS public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id)
    REFERENCES public.auth_permission (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_user_permissions_permission_id_1fbb5f2c
    ON public.auth_user_user_permissions(permission_id);


ALTER TABLE IF EXISTS public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_user_permissions_user_id_a95ead1b
    ON public.auth_user_user_permissions(user_id);


ALTER TABLE IF EXISTS public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id)
    REFERENCES public.django_content_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS django_admin_log_content_type_id_c4bce8eb
    ON public.django_admin_log(content_type_id);


ALTER TABLE IF EXISTS public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS django_admin_log_user_id_c564eba6
    ON public.django_admin_log(user_id);

END;